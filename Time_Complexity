Time Complexity
Date: 07/24/2021

Notes from "Calculating Time Complexity | New Examples | GeeksforGeeks"
URL: youtube.com/watch?v=KXAbAa1mieU

Time Complexity is analyzed for:
- Large input sizes
- Worst case scenarios

T(n) = 2n^2 + 3n + 1
> Drop lower order terms
T(n) = 2n^2
> Drop all constant multipliers
T(n) = n^2
T(n) = O(n^2)

Simple for loop calculation:

for (i=1;i<=n;i++){
    x = y + z this evaluation takes a constant time, c
}

The loop evaluates n times.
T(n) = cn
> Drop all constant multipliers
T(n) = O(n)

Nested Loops
for (i=1;i<=n;i++){
    for(j=1;j<=n;j++){
        x=y+z
    }
}

The inner loop will run n times, and the outer loop will also run n times.
The total evaluation of the code is n^2 times.
T(n) = cn^2
T(n) = O(n^2)

Sequential Statements
a = a + b //constant time c1
for (i=1;i<=n;i++){ //time c2n
    x = y + z 
}
for (i=1;i<=n;i++){ //time c3n
    x = y + z 
}

Add the time complexities together: c1 + c2n + c3n
T(n) = (c1+c2+c3)n
T(n) = O(n)

If-else statements
if(condition) {
    O(n)
}
else (condition) {
    O(n^2)
}

Evaluated at the "longest" time complexity of the code. Above code will calculate as O(n^2) time complexity.

Best to worst time complexities:
O(1) < O(logn) < O(n) < O(nlogn) < O(n^c) < O(n!)

Various algoriths have different time complexities.

Space Complexity
- Amount of Space

Example:
If each integer is 4bytes
{
    int a, b, c;
    int z = a + b + c;
    return(z);
}
4 integers * 4bytes + 4bytes (from return statement) = 20 bytes

Usually a trade-off between memory use and runtime performance
Space efficiency is inverse to time complexity